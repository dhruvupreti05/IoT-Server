#! /usr/bin/python

from influxdb import InfluxDBClient
from dotenv import load_dotenv
from datetime import datetime
import requests
import argparse
import dropbox
import csv
import io
import os

load_dotenv()

INFLUX_PORT = 8086

access_token = requests.post(
    "https://api.dropbox.com/oauth2/token",
    data={
        "grant_type": "refresh_token",
        "refresh_token": os.getenv("REFRESH_TOKEN"),
        "client_id": os.getenv("APP_KEY"),
        "client_secret": os.getenv("APP_SECRET"),
    }
).json()["access_token"]

dbx = dropbox.Dropbox(access_token)
client = InfluxDBClient(host=os.getenv("INFLUX_HOST"), port=INFLUX_PORT, 
                        username=os.getenv("INFLUX_USER"), password=os.getenv("INFLUX_PASSWORD"))

def query_data(database, measurement, day):
    timeStatement = f"WHERE time >= now() - {day}"
    if day != "d1":
        timeStatement = f"WHERE time >= d{int(day[1:])-1} AND time < {day}"
    client.switch_database(database)
    query = f'SELECT * FROM "{measurement}" {timeStatement}'
    return client.query(query)

def upload_to_dropbox(csv_content, measurement, days):
    date = (datetime.now() - datetime.timedelta(days=int(days[1:]) - 1)).strftime("%Y-%m-%d")
    dbx.files_upload(csv_content.encode(), f"/ServerData/{date}/{measurement.replace('_', ' ').title()}.csv")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Upload InfluxDB data to Dropbox.")
    parser.add_argument("--dates", type=str, default="d1")
    args = parser.parse_args()
    
    databases = [db["name"] for db in client.get_list_database()]
    
    for database in databases:
        client.switch_database(database)
        measurements = [m["name"] for m in client.get_list_measurements()]

        for measurement in measurements:
            result = query_data(database, measurement, args.dates)
            
            csv_buffer = io.StringIO()
            csv_writer = csv.writer(csv_buffer)

            headers_written = False
            for point in result.get_points(measurement=measurement):
                if not headers_written:
                    headers = list(point.keys())
                    csv_writer.writerow(headers)
                    headers_written = True
                
                row = [point.get("time").replace("T", " ").replace("Z", "")]
                row += [point.get(field) for field in headers[1:]]
                csv_writer.writerow(row)
            
            csv_buffer.seek(0)
            upload_to_dropbox(csv_buffer.getvalue(), measurement, args.dates)

client.close()

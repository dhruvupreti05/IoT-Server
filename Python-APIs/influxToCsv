#! /usr/bin/python

from influxdb import InfluxDBClient
from dotenv import load_dotenv
from datetime import datetime, timedelta
import argparse
import csv
import os

load_dotenv()

INFLUX_PORT = 8086
LOCAL_PATH = os.getenv("DROPBOX_PATH")

client = InfluxDBClient(host=os.getenv("INFLUX_HOST"), port=INFLUX_PORT, username=os.getenv("INFLUX_USER"), password=os.getenv("INFLUX_PASSWORD"))

def query_data(database, measurement, day):
    client.switch_database(database)
    query = f'SELECT * FROM "{measurement}" WHERE time >= now() - {day}'
    if day != "1d":
        query += f" and time <= now() - {int(day[1:])-1}d"
    return client.query(query)

def save_to_csv(file_path, measurement, result):
    with open(file_path, "w", newline="", encoding="utf-8") as csv_file:
        csv_writer = csv.writer(csv_file)

        headers_written = False
        for point in result.get_points(measurement=measurement):
            if not headers_written:
                headers = list(point.keys())
                csv_writer.writerow(headers)
                headers_written = True

            row = [point.get("time").replace("T", " ").replace("Z", "")]
            row += [point.get(field) for field in headers[1:]]
            csv_writer.writerow(row)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Upload InfluxDB data to Dropbox.")
    parser.add_argument("--date", type=str, default="d1")
    args = parser.parse_args()

    databases = [db["name"] for db in client.get_list_database()]

    for database in databases:
        client.switch_database(database)
        measurements = [m["name"] for m in client.get_list_measurements()]

        for measurement in measurements:
            result = query_data(database, measurement, args.date)

            date = date = (datetime.now() - timedelta(days=int(args.date[1:]) - 1)).strftime("%Y-%m-%d")
            directory = os.path.join(LOCAL_PATH, date)
            os.makedirs(directory, exist_ok=True) 

            file_path = os.path.join(directory, f"{measurement.replace('_', ' ').title()}.csv")
            save_to_csv(file_path, measurement, result)

client.close()

#! bin/python
# PYTHON_ARGCOMPLETE_OK

"""
Grafana Influx DB Command-line API 
Ma Quantum Group
"""

from dotenv import load_dotenv 
import argcomplete
import requests
import argparse
import time
import json
import os

BLUE = "\033[94m"
GREEN = "\033[92m"
RESET = "\033[0m"

load_dotenv()

grafana_token = os.getenv("GRAPHANA_TOKEN")
grafana_url = "http://192.168.1.104:3000/"
infludb_url = "http://192.168.1.104:8086/"

provisioning_header = {
    "Content-Type":"application/json",
    "Authorization":f"Bearer {grafana_token}"
}

datasource_header = {
    "Content-Type":"application/json",
    "Application":"application/json",
    "Authorization":f"Bearer {grafana_token}"
}

influx_db_get_measurements_parameter = lambda database_name : {
    "db": database_name,
    "q": "SHOW MEASUREMENTS"
}

influxdb_get_fields_parameter = lambda database_name, measurement_name : {
    "db": database_name,
    "q": f"SHOW FIELD KEYS FROM {measurement_name}" 
}

alert_rules_url = "api/v1/provisioning/alert-rules/"
dashboard_url = "api/dashboards/uid/"
update_dashboard_url = "api/dashboards/db/"
datasource_url = "api/datasources/"
query_url = "query"
search_url = "api/search/"

main_folder_uid = "c647d423-8003-4ae5-b26a-8495098f82b2"
rule_group = "10 Sec Evaluation Group"

class ThresholdConfiguration:
    configurations = []

    def __init__(self, file_name):
        self.config_json = json.load(open(file_name))

    def setAlerts(self):
        for alert in self.config_json:
            if Threshold.getThresholdFromName(alert["name"], False):
                Threshold.getThresholdFromName(alert["name"], False).changeDashboardThreshold(alert["value"])
            else:
                Threshold.createAlert(alert["threshold"], alert["state"], alert["boundType"], alert["alert_type"], alert)
        
        for threshold in Threshold.thresholds:
            if not getJsonArrayIndex("name", self.config_json, threshold.getName(), True):
                Threshold.delete(threshold)

    def getName(self):
        return self.config_json["name"]

class Threshold:
    thresholds  = []

    def __init__(self, alertJson):
        self.alertJson = alertJson

    def __str__(self): # Prints status of threshold to command line 
        return f"Name: {BLUE}{"'"+self.getName()+"'":<{50}}{RESET} | Value: {GREEN}{self.getThreshold():<{15}}{RESET} | Silenced: {GREEN}{self.getStateString():<{20}}{RESET}"

    def getName(self): # Returns title of alert
        return self.alertJson["title"] 

    def getThreshold(self): # Returns numerical value of alert
        return self.alertJson["data"][2]["model"]["conditions"][0]["evaluator"]["params"][0]

    def getStateString(self): # Return 'True' or 'False' state of alert
        return "True" if self.alertJson["isPaused"] else "False"

    def getAnnotatedDashboardUid(self): # returns uid of dashboard associated with alert
        return self.alertJson["annotations"]["__dashboardUid__"]

    def getAlertId(self): # Returns alert uid
        return self.alertJson["uid"]
    
    def getDatasourceUid(self): # Returns the uid of the Data source, i.e. which Influx DB database 
        return self.alertJson["data"][getJsonArrayIndex("refId", self.alertJson["data"], "A")[0]]["datasourceUid"]

    def getMeasurement(self): # Returns name of measurement from Influx DB database
        return self.alertJson["data"][getJsonArrayIndex("refId", self.alertJson["data"], "A")[0]]["model"]["measurement"]
    
    def getFeild(self): # Returns name of Feild from Influx DB measurement
        a_refId_index = getJsonArrayIndex("refId", self.alertJson["data"], "A")[0]
        feild_type_index = getJsonArrayIndex("type", self.alertJson["data"][a_refId_index]["model"]["select"][0], "field")[0]
        return self.alertJson["data"][a_refId_index]["model"]["select"][0][feild_type_index]["params"][0]
    
    def getAllDashboardPanels(self): # Returns tuple list of dashboard uid and associated panel number
        dashboardPanels = []
        for dashboard in Threshold.getDashboards().values():
            for index, panel in enumerate(httpGetRequest(grafana_url+dashboard_url+dashboard, provisioning_header)["dashboard"]["panels"]):
                if self.checkPanelMatch(panel):
                    dashboardPanels.append((dashboard, index))
    
        return dashboardPanels
    
    def checkPanelMatch(self, panel): # Checks to see if datasource parameters match for a dashboard panel
        return panel["targets"][0]["datasource"]["uid"] == self.getDatasourceUid() \
            and panel["targets"][0]["measurement"] == self.getMeasurement() \
            and panel["targets"][0]["select"][0][getJsonArrayIndex("type", panel["targets"][0]["select"][0], "field")[0]]["params"][0] == self.getFeild()
    
    def setThresholdValue(self, value):
        c_refId_index = getJsonArrayIndex("refId", self.alertJson["data"], "C")[0]
        self.alertJson["data"][c_refId_index]["model"]["conditions"][0]["evaluator"]["params"][0] = value
        httpPutRequest(alert_rules_url+self.getAlertId(), self.alertJson)

    def createDashboardThreshold(self): # Create threshold in dashboard from alertJson value, shift other values if required
        for dashboardId, panelNum in self.getAllDashboardPanels():

            dashboardJson = httpGetRequest(grafana_url+dashboard_url+dashboardId, provisioning_header)
            color_indices = lambda color : getJsonArrayIndex("color", dashboardJson["dashboard"]["panels"][panelNum]["fieldConfig"]["defaults"]["thresholds"]["steps"], color)
            value = self.getThreshold()

            if "Upper" in self.getName():
                if "Warning" in self.getName():
                    dashboardJson["dashboard"]["panels"][panelNum]["fieldConfig"]["defaults"]["thresholds"]["steps"].append({"color":"orange", "value":value})                    
                else:
                    dashboardJson["dashboard"]["panels"][panelNum]["fieldConfig"]["defaults"]["thresholds"]["steps"].append({"color":"red", "value":value})
            else:
                if "Warning" in self.getName():
                    dashboardJson["dashboard"]["panels"][panelNum]["fieldConfig"]["defaults"]["thresholds"]["steps"][color_indices("green")[0]]["color"] = "dark-orange"
                    dashboardJson["dashboard"]["panels"][panelNum]["fieldConfig"]["defaults"]["thresholds"]["steps"].append({"color":"green", "value":value})
                else:
                    if getJsonArrayIndex("color", dashboardJson["dashboard"]["panels"][panelNum]["fieldConfig"]["defaults"]["thresholds"]["steps"], "dark-orange", True):
                        dashboardJson["dashboard"]["panels"][panelNum]["fieldConfig"]["defaults"]["thresholds"]["steps"][color_indices("dark-orange")[0]]["color"] = "dark-red"
                        dashboardJson["dashboard"]["panels"][panelNum]["fieldConfig"]["defaults"]["thresholds"]["steps"].append({"color":"dark-orange", "value":value})
                    else:
                        dashboardJson["dashboard"]["panels"][panelNum]["fieldConfig"]["defaults"]["thresholds"]["steps"][color_indices("green")[0]]["color"] = "dark-red"
                        dashboardJson["dashboard"]["panels"][panelNum]["fieldConfig"]["defaults"]["thresholds"]["steps"].append({"color":"green", "value":value})

            httpPostRequest(grafana_url+update_dashboard_url, dashboardJson)
        
    def removeDashboardThreshold(self): # Delete threshold in dashboard, shift other values if required 
        for dashboardId, panelNum in self.getAllDashboardPanels():

            dashboardJson = httpGetRequest(grafana_url+dashboard_url+dashboardId, provisioning_header)
            color_indices = lambda color : getJsonArrayIndex("color", dashboardJson["dashboard"]["panels"][panelNum]["fieldConfig"]["defaults"]["thresholds"]["steps"], color)

            if "Upper" in self.getName():
                dashboardJson["dashboard"]["panels"][panelNum]["fieldConfig"]["defaults"]["thresholds"]["steps"].pop(color_indices("orange" if "Warning" in self.getName() else "red")[0])                    
            else:
                if "Warning" in self.getName():
                    dashboardJson["dashboard"]["panels"][panelNum]["fieldConfig"]["defaults"]["thresholds"]["steps"].pop(color_indices("green")[0])
                    dashboardJson["dashboard"]["panels"][panelNum]["fieldConfig"]["defaults"]["thresholds"]["steps"][color_indices("dark-orange")[0]]["color"] = "green"
                else:
                    if getJsonArrayIndex("color", dashboardJson["dashboard"]["panels"][panelNum]["fieldConfig"]["defaults"]["thresholds"]["steps"], "dark-orange", True):
                        dashboardJson["dashboard"]["panels"][panelNum]["fieldConfig"]["defaults"]["thresholds"]["steps"].pop(color_indices("dark-orange")[0])
                        dashboardJson["dashboard"]["panels"][panelNum]["fieldConfig"]["defaults"]["thresholds"]["steps"][color_indices("dark-red")[0]]["color"] = "dark-orange"
                    else:
                        dashboardJson["dashboard"]["panels"][panelNum]["fieldConfig"]["defaults"]["thresholds"]["steps"].pop(color_indices("green")[0])
                        dashboardJson["dashboard"]["panels"][panelNum]["fieldConfig"]["defaults"]["thresholds"]["steps"][color_indices("dark-red")[0]]["color"] = "green"

            httpPostRequest(grafana_url+update_dashboard_url, dashboardJson)
        
    def changeDashboardThreshold(self, value, editAlertJson=True): # Change the value of the dashboard threshold, if editAlertJson == False edit only panel 
        if editAlertJson is True:
            self.setThresholdValue(self, value)

        for dashboardId, panelNum in self.getAllDashboardPanels():
            thresholdNum = None
            dashboardJson = httpGetRequest(grafana_url+dashboard_url+dashboardId, provisioning_header)

            color_indices = lambda color : getJsonArrayIndex("color", dashboardJson["dashboard"]["panels"][panelNum]["fieldConfig"]["defaults"]["thresholds"]["steps"], color)

            if "Warning" in self.getName() and "Upper" in self.getName():
                thresholdNum = color_indices("orange")[0]
            elif "Critical" in self.getName() and "Upper" in self.getName():
                thresholdNum = color_indices("red")[0]
            elif "Warning" in self.getName() and "Lower" in self.getName():
                thresholdNum = color_indices("green")[0]
            elif "Critical" in self.getName() and "Lower" in self.getName():
                if getJsonArrayIndex("color", dashboardJson["dashboard"]["panels"][panelNum]["fieldConfig"]["defaults"]["thresholds"]["steps"], "dark-orange", True):
                    thresholdNum = color_indices("dark-orange")[0]
                else:
                    thresholdNum = color_indices("green")[0]

            dashboardJson["dashboard"]["panels"][panelNum]["fieldConfig"]["defaults"]["thresholds"]["steps"][thresholdNum]["value"] = value

            httpPostRequest(grafana_url+update_dashboard_url, dashboardJson)

    def changeDashboardThresholdState(self, state): # Sets the state of the dashboard's threshold
        if state == "ON":
            self.alertJson["isPaused"] = bool(False)
            self.createDashboardThreshold()
        else:
            self.alertJson["isPaused"] = bool(True)
            self.removeDashboardThreshold()

        httpPutRequest(alert_rules_url+self.getAlertId(), self.alertJson)

    @staticmethod
    def createAlert(threshold, state, bound_type, alert_type, inputJson=None):
        print(f"Creating alert ... Enter in values below:")

        databases = {database["jsonData"]["dbName"]:database["uid"] for database in httpGetRequest(grafana_url+datasource_url, datasource_header)}
        if inputJson is None:
            database = Threshold.getCheck("Influx DB databases", list(databases.keys()))
        else:
            database = inputJson["database"]

        measurements = [measurement[0] for measurement in httpGetRequest(infludb_url+query_url, None, influx_db_get_measurements_parameter(database))["results"][0]["series"][0]["values"]]
        if inputJson is None:
            measurement = Threshold.getCheck(f"Measurement from database {database}", measurements)
        else:
            measurement = inputJson["measurement"]

        fields = [field[0] for field in httpGetRequest(infludb_url+query_url, None, influxdb_get_fields_parameter(database, measurement))["results"][0]["series"][0]["values"]]
        if inputJson is None:
            field = Threshold.getCheck(f"field from measurement {measurement}", fields)
        else:
            field = inputJson["feild"]

        with open('alert_template.json', 'r') as file:
            alert_template = json.load(file)

            alert_template["ruleGroup"] = rule_group
            alert_template["folderUID"] = main_folder_uid
            if inputJson is None:
                alert_template["title"] = input("Enter name: ") + (" Upper " if bound_type == "gt" else " Lower ") + alert_type + " Alert" 
            else:
                alert_template["title"] = inputJson["title"] 

            a_refId_index = getJsonArrayIndex("refId", alert_template["data"], "A")[0]
            c_refId_index = getJsonArrayIndex("refId", alert_template["data"], "C")[0]

            alert_template["data"][a_refId_index]["datasourceUid"] = databases[database]
            alert_template["data"][a_refId_index]["model"]["datasource"]["uid"] = databases[database]
            alert_template["data"][a_refId_index]["model"]["measurement"] = measurement

            feild_type_index = getJsonArrayIndex("type", alert_template["data"][a_refId_index]["model"]["select"][0], "field")[0]
            alert_template["data"][a_refId_index]["model"]["select"][0][feild_type_index]["params"][0] = field

            alert_template["data"][c_refId_index]["model"]["conditions"][0]["evaluator"]["params"].append(threshold)
            alert_template["data"][c_refId_index]["model"]["conditions"][0]["evaluator"]["type"] = bound_type

            alert_template["noDataState"] = strictInput("State alert when NO DATA? ('OK'/'Alerting') ", ["OK", "Alerting"])
            alert_template["labels"]["level"] = alert_type.lower()
            

            if inputJson["annotations"]:
                alert_template["annotations"]["__dashboardUid__"] = dashboards[inputJson["annotations"]["dashboardName"]]
                alert_template["annotations"]["__panelId__"] = inputJson["annotations"]["panelId"]
            elif strictInput("Configure dashboard-alert pair? ('y'/'n') ", ["y", "n"]) == "y":
                dashboards = Threshold.getDashboards()
                alert_template["annotations"]["__dashboardUid__"] = dashboards[Threshold.getCheck("dashboard names", list(dashboards.keys()))]
                alert_template["annotations"]["__panelId__"] = input("Enter in panel ID : ")  # Alternative solution! 
                
            alert_template["isPaused"] = bool(False) if state == "ON" else bool(True)

            httpPostRequest(grafana_url+alert_rules_url, alert_template, datasource_header)
            alert = Threshold(alert_template)
            alert.createDashboardThreshold()
            Threshold.thresholds.append(alert)         
            return alert
        
    @staticmethod
    def delete(threshold): # Deletes dashboard thresholds, alert from api, etc.
        httpDeleteRequest(grafana_url+alert_rules_url+threshold.getAlertId())
        threshold.removeDashboardThreshold()
        Threshold.thresholds.pop(Threshold.getThresholdFromName(threshold.getName(), False, True)[0])
        
    @staticmethod
    def getThresholdFromName(name, multipleThresholds, indices=False):
        result = []
        for index, threshold in enumerate(Threshold.thresholds):
            if name in threshold.getName():
                if indices:
                    result.append((index, threshold))
                else:
                    result.append(threshold)

        if result is []:
            return None
        return result if multipleThresholds else result[0]

    @staticmethod
    def removeDescriptors(string):
        return string.replace("Warning", "").replace("Critical", "").replace("Alert", "").replace("Upper").replace("Lower").rstrip()
    
    @staticmethod
    def getDashboards(): # Gets all dashboards on grafana 
        dashboardUids = {}
        for dashboard in httpGetRequest(grafana_url+search_url, provisioning_header):
            if dashboard["type"] != "dash-db":
                continue
            dashboardUids[dashboard["title"]] = dashboard["uid"]

        return dashboardUids
    
    @staticmethod
    def getCheck(parameterName, parameters):
        print(f"Choose {parameterName}, or number from list:")
        print("\n".join(f"{index}. {parameter}" for index, parameter in enumerate(parameters)))
        
        parameter = input("Name or Index: ")

        while True:
            if parameter in parameters:
                return parameter
            elif parameter.isdigit() and int(parameter) < len(parameters) and int(parameter) >= 0:
                return parameters[int(parameter)]
            else:
                parameter = input(f"'{parameter}' not in {parameterName} list or in range of possible indexes, retry: ")

def httpGetRequest(url, header, param=None):
    request = requests.get(url, headers=header, params=param)
    if request.status_code != 200:
        print(f"Error in request GET: {json.dumps(request.json())}")
        time.sleep(2)
        return httpGetRequest(url, header, param)
    return request.json()

def httpPutRequest(url, jsonMessage, header=provisioning_header):
    request = requests.put(url, data=json.dumps(jsonMessage), headers=header)
    if request.status_code != 200:
        print(f"Error in request PUT: {json.dumps(request.json())}")
        time.sleep(2)
        httpPutRequest(url, jsonMessage, provisioning_header)

def httpPostRequest(url, jsonMessage, header=provisioning_header):
    request = requests.post(url, data=json.dumps(jsonMessage), headers=header)
    if request.status_code != 200 and request.status_code != 201:
        print(f"Error in request POST: {json.dumps(request.json())}")
        time.sleep(2)
        httpPostRequest(url, jsonMessage, provisioning_header)

def httpDeleteRequest(url, header=datasource_header):
    request = requests.delete(url, headers=header)
    if request.status_code != 204:
        print(f"Error in request DELETE: {json.dumps(request.json())}")
        time.sleep(2)
        httpDeleteRequest(url, datasource_header)

def strictInput(question, correctValues):
    while True:
        answer = input(question)
        if answer in correctValues:
            return answer
        else:
            print(f"Incorrect value: {answer}, enter correct value: '{', '.join(correctValues)}'")

def getJsonArrayIndex(subfield, json, value, empty=False):
        arrIndices = []
        for index, subJson in enumerate(json):
            if value == subJson[subfield]:
                arrIndices.append(index)
                break

        if len(arrIndices) == 0 and not empty:
            raise Exception(f"{value} is not found in Json Array {json}")
        return arrIndices
    
def getArguments():
    parser = argparse.ArgumentParser(description='edit and view threshold values')
    threshold_names = [threshold.getName() for threshold in Threshold.thresholds]
    configuration_names = [configuration.getName() for configuration in ThresholdConfiguration.configurations]

    parser.add_argument("--name", choices=threshold_names, default=None, type=str, help="enter EXACT threshold name, to view names run program w/o arguments")
    parser.add_argument("--threshold", default=None, type=float, help="float value for threshold")
    parser.add_argument("--state", choices=["ON", "OFF"], default=None, type=str, help="'ON' or 'OFF'")

    parser.add_argument("--create_upper_critical", action="store_true", help="create critical upper bound alert")
    parser.add_argument("--create_lower_critical", action="store_true", help="create critical lower bound alert")
    parser.add_argument("--create_upper_warning", action="store_true", help="create warning upper bound alert")
    parser.add_argument("--create_lower_warning", action="store_true", help="create warning lower bound alert")
    parser.add_argument("--delete", choices=threshold_names, default=None, type=str, help="delete alert")

    parser.add_argument("--config", choices=configuration_names, default=None, type=str, help="alert configurations")
    parser.add_argument("--json", choices=["alert", "dashboard"], default=None, type=str, help="debug only")

    argcomplete.autocomplete(parser)

    return parser.parse_args()

if __name__ == "__main__":
    alerts = httpGetRequest(grafana_url+alert_rules_url, provisioning_header)

    for alert in alerts:
        Threshold.thresholds.append(Threshold(alert))

    arguments = getArguments()

    if sum([arguments.create_upper_critical, arguments.create_upper_warning, arguments.create_lower_critical, arguments.create_lower_warning]) == 1 and arguments.threshold is not None and arguments.state is not None:
        if arguments.create_upper_critical:                
            Threshold.thresholds.append(Threshold.createAlert(arguments.threshold, arguments.state, "gt", "Critical"))
        elif arguments.create_lower_critical:
            Threshold.thresholds.append(Threshold.createAlert(arguments.threshold, arguments.state, "lt", "Critical"))
        elif arguments.create_upper_warning:
            Threshold.thresholds.append(Threshold.createAlert(arguments.threshold, arguments.state, "gt", "Warning"))
        elif arguments.create_lower_warning:
            Threshold.thresholds.append(Threshold.createAlert(arguments.threshold, arguments.state, "lt", "Warning"))
        else:
            quit()
        
    if arguments.delete and Threshold.getThresholdFromName(arguments.delete) is not None:
        confirmation = strictInput(f"Are you sure you want to delete: '{arguments.delete}'? It is irreversible! (Y/n) ", ["Y", "n"])
        if confirmation == "Y":
            for threshold in enumerate(Threshold.thresholds):
                if threshold.getName() == arguments.delete:
                    Threshold.delete(threshold)
                    break
            
    if arguments.name is not None:
        if arguments.threshold is not None and arguments.state is not None:
            raise Exception("Edit one property per request")

        if arguments.threshold is not None:
            threshold = Threshold.getThresholdFromName(arguments.name, False)
            if threshold is None:
                raise Exception(f"Threshold {arguments.name} does not exist")
            if threshold.getStateString() == "False":
                threshold.changeDashboardThreshold(arguments.threshold)
            else:
                threshold.setThresholdValue(arguments.threshold)

        if arguments.state is not None:
            thresholds = Threshold.getThresholdFromName(arguments.name, True)
            for threshold in thresholds:
                threshold.changeDashboardThresholdState(arguments.state)

        if "alert" in arguments.json:
            print(json.dumps(httpGetRequest(grafana_url+alert_rules_url+Threshold.getThresholdFromName(arguments.name, False).getAlertId(), provisioning_header)))
            quit()

        if "dashboard" in arguments.json:
            print(json.dumps(httpGetRequest(grafana_url+dashboard_url+Threshold.getThresholdFromName(arguments.name, False).getDashboardId(), provisioning_header)))
            quit()

    for enum, threshold in enumerate(httpGetRequest(grafana_url+alert_rules_url, provisioning_header)):
        Threshold.thresholds[enum] = Threshold(threshold)
        print(Threshold(threshold))
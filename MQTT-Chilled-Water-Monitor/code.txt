#include <ArduinoOTA.h> 
#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>

#include "SHT31.h"

SHT31 sht31 = SHT31();

// WiFi Credentials
const char* ssid = "MaLab";
const char* password = "MaLabG41";

const char* mqttServer = "192.168.1.104";
const int mqttPort = 1883;
const char* mqttUser = "maserver";
const char* mqttPassword = "malabpurdue";

const char* username = "lab_makeup_as";

WiFiClient espClient;
PubSubClient client(espClient);

#define RED_LED 2
#define GREEN_LED 0
#define YELLOW_LED 15

void setup() {
  Serial.begin(9600);

  pinMode(RED_LED, OUTPUT);
  pinMode(GREEN_LED, OUTPUT);
  pinMode(YELLOW_LED, OUTPUT);

  // Initialize WiFi connection
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  // Initialize MQTT connection
  client.setServer(mqttServer, mqttPort);
  while (!client.connected()) {
    Serial.println("Connecting to MQTT...");
    if (client.connect(username, mqttUser, mqttPassword)) {
      Serial.println("Connected to MQTT");
    } else {
      Serial.print("Failed with state ");
      Serial.println(client.state());
      delay(2000);
    }
  }

  // Set OTA hostname to "username"
  ArduinoOTA.setHostname(username);

  // Begin OTA
  ArduinoOTA.onStart([]() {
    String type;
    if (ArduinoOTA.getCommand() == U_FLASH) {
      type = "sketch";
    } else {  // U_FS
      type = "filesystem";
    }

    Serial.println("Start updating " + type);
  });
  ArduinoOTA.onEnd([]() {
    Serial.println("\nEnd");
  });
  ArduinoOTA.onProgress([](unsigned int progress, unsigned int total) {
    Serial.printf("Progress: %u%%\r", (progress / (total / 100)));
  });
  ArduinoOTA.onError([](ota_error_t error) {
    Serial.printf("Error[%u]: ", error);
    if (error == OTA_AUTH_ERROR) {
      Serial.println("Auth Failed");
    } else if (error == OTA_BEGIN_ERROR) {
      Serial.println("Begin Failed");
    } else if (error == OTA_CONNECT_ERROR) {
      Serial.println("Connect Failed");
    } else if (error == OTA_RECEIVE_ERROR) {
      Serial.println("Receive Failed");
    } else if (error == OTA_END_ERROR) {
      Serial.println("End Failed");
    }
  });

  ArduinoOTA.begin();
  Serial.println("Ready");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  // Initialize I2C connections
  Wire.begin();
  sht31.begin();
}


void reconnectWifi() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("Wifi connection lost");
    while (WiFi.status() != WL_CONNECTED) {
      delay(1000);
      Serial.println("Reconnecting to WiFi...");
      WiFi.begin(ssid, password);
      ArduinoOTA.handle();  // Allow OTA during WiFi reconnection
    }
    Serial.println("Reconnected to WiFi");
  }
}

void reconnectMqtt() {
  if (!client.connected()) {
    Serial.println("Reconnecting to MQTT...");
    while (!client.connected()) {
      if (client.connect(username, mqttUser, mqttPassword)) {
        Serial.println("Reconnected to MQTT");
      } else {
        Serial.print("Failed with state ");
        Serial.println(client.state());
        delay(2000);
        ArduinoOTA.handle();  // Allow OTA during MQTT reconnection
      }
    }
  }
}

void loop() {
  ArduinoOTA.handle();  // Check for OTA updates
  reconnectWifi();      // Ensure WiFi connection

  if (!client.connected()) {
    reconnectMqtt();    // Reconnect to MQTT if disconnected
  }

  // Read sensor data
  float temp = sht31.getTemperature();
  float hum = sht31.getHumidity();

  // Check if sensor data is valid
  if (isnan(temp) || isnan(hum)) {
    Serial.println("DHT Error");
    digitalWrite(YELLOW_LED, HIGH);
  } else {
    digitalWrite(YELLOW_LED, LOW);
  }

  // Publish data if MQTT is connected
  if (client.connected()) {
    StaticJsonDocument<200> doc;
    char output[200];
    doc[String(username) + "_temp"] = temp;
    doc[String(username) + "_hum"] = hum;
    serializeJson(doc, output);
    client.publish("lab_weather/", output);
  }

  client.loop();  // Required for MQTT communication

  delay(2000);  // Adjust this delay as needed
}